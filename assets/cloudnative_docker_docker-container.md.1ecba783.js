import{_ as s,c as a,o as n,a as l}from"./app.cf0a218f.js";const u=JSON.parse('{"title":"docker004 container 容器","description":"","frontmatter":{},"headers":[{"level":2,"title":"查看","slug":"查看","link":"#查看","children":[]},{"level":2,"title":"创建","slug":"创建","link":"#创建","children":[]},{"level":2,"title":"退出容器","slug":"退出容器","link":"#退出容器","children":[{"level":3,"title":"与容器运行模式相关参数","slug":"与容器运行模式相关参数","link":"#与容器运行模式相关参数","children":[]},{"level":3,"title":"与容器和环境配置相关参数","slug":"与容器和环境配置相关参数","link":"#与容器和环境配置相关参数","children":[]},{"level":3,"title":"与容器资源限制和安全保护相关参数","slug":"与容器资源限制和安全保护相关参数","link":"#与容器资源限制和安全保护相关参数","children":[]}]},{"level":2,"title":"终止容器 docker stop","slug":"终止容器-docker-stop","link":"#终止容器-docker-stop","children":[{"level":3,"title":"暂停容器 pause/unpause","slug":"暂停容器-pause-unpause","link":"#暂停容器-pause-unpause","children":[]}]},{"level":2,"title":"进入容器","slug":"进入容器","link":"#进入容器","children":[]},{"level":2,"title":"删除容器 docker rm","slug":"删除容器-docker-rm","link":"#删除容器-docker-rm","children":[]},{"level":2,"title":"导入/导出容器","slug":"导入-导出容器","link":"#导入-导出容器","children":[]},{"level":2,"title":"容器限额","slug":"容器限额","link":"#容器限额","children":[]},{"level":2,"title":"限额内存(run)","slug":"限额内存-run","link":"#限额内存-run","children":[]},{"level":2,"title":"限额CPU(run)","slug":"限额cpu-run","link":"#限额cpu-run","children":[]},{"level":2,"title":"限额Block IO(run)","slug":"限额block-io-run","link":"#限额block-io-run","children":[]},{"level":2,"title":"cp复制命令","slug":"cp复制命令","link":"#cp复制命令","children":[]},{"level":2,"title":"logs查看日志","slug":"logs查看日志","link":"#logs查看日志","children":[]}],"relativePath":"cloudnative/docker/docker-container.md"}'),e={name:"cloudnative/docker/docker-container.md"},p=l(`<h1 id="docker004-container-容器" tabindex="-1">docker004 container 容器 <a class="header-anchor" href="#docker004-container-容器" aria-hidden="true">#</a></h1><p>容器是镜像的一个运行实例.</p><h2 id="查看" tabindex="-1">查看 <a class="header-anchor" href="#查看" aria-hidden="true">#</a></h2><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># docker ps</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># ps选项常用的是a和q</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">-a,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--all</span><span style="color:#A6ACCD;">             </span><span style="color:#C3E88D;">Show</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">all</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">containers</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">shows</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">just</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">running</span><span style="color:#89DDFF;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">-q,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--quiet</span><span style="color:#A6ACCD;">           </span><span style="color:#C3E88D;">Only</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">display</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">container</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">IDs</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ps</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-a</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">container</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ls</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">container</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ls</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-a</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 查看容器内部信息</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">top</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">id</span></span>
<span class="line"></span></code></pre></div><h2 id="创建" tabindex="-1">创建 <a class="header-anchor" href="#创建" aria-hidden="true">#</a></h2><p><strong>docker run = docker create + docker start</strong></p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--help</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Usage:  docker run [OPTIONS] IMAGE [COMMAND] [ARG...]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># examples</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 1. 交互式</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-it</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ubuntu</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/bin/bash</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 2. daemon方式</span></span>
<span class="line"></span></code></pre></div><p>常用options如下:</p><ul><li>创建容器 docker create</li></ul><p>stdin: 指定标准输入输出内容类型，可选 STDIN/STDOUT/STDERR 三项；</p><p>-d: 后台运行容器，并返回容器ID；</p><p>-i: 以交互模式运行容器，通常与 -t 同时使用；</p><p>--rm: 容器执行完命令或程序后就销毁</p><p>-P: 随机端口映射，容器内部端口随机映射到主机的高端口</p><p>-p: 指定端口映射，格式为：主机(宿主)端口:容器端口</p><p>-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</p><p>--name=&quot;nginx-lb&quot;: 为容器指定一个名称；</p><p>--dns 8.8.8.8: 指定容器使用的DNS服务器，默认和宿主一致；</p><p>--dns-search <a href="http://example.com" target="_blank" rel="noreferrer">example.com</a>: 指定容器DNS搜索域名，默认和宿主一致；</p><p>-h &quot;mars&quot;: 指定容器的hostname；</p><p>-e username=&quot;ritchie&quot;: 设置环境变量；</p><p>--env-file=[]: 从指定文件读入环境变量；</p><p>--cpuset=&quot;0-2&quot; or --cpuset=&quot;0,1,2&quot;: 绑定容器到指定CPU运行；</p><p>-m :设置容器使用内存最大值；</p><p>--net=&quot;bridge&quot;: 指定容器的网络连接类型，支持 bridge/host/none/container: 四种类型；</p><p>--link=[]: 添加链接到另一个容器；</p><p>--expose=[]: 开放一个端口或一组端口；</p><p>--volume , -v: 绑定一个卷</p><ul><li>启动容器 docker start</li></ul><p>--restart=always 意味着无论容器因何种原因退出（包括正常退出），就立即重启。该参数的形式还可以是 --restart=on-failure:3，意思是如果启动进程退出代码非0，则重启容器，最多重启3次。</p><h2 id="退出容器" tabindex="-1">退出容器 <a class="header-anchor" href="#退出容器" aria-hidden="true">#</a></h2><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 1. run进去, exit方式退出, 容器停止</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 2. run进去, ctrl+p+q退出, 容器不停止</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h3 id="与容器运行模式相关参数" tabindex="-1">与容器运行模式相关参数 <a class="header-anchor" href="#与容器运行模式相关参数" aria-hidden="true">#</a></h3><h3 id="与容器和环境配置相关参数" tabindex="-1">与容器和环境配置相关参数 <a class="header-anchor" href="#与容器和环境配置相关参数" aria-hidden="true">#</a></h3><h3 id="与容器资源限制和安全保护相关参数" tabindex="-1">与容器资源限制和安全保护相关参数 <a class="header-anchor" href="#与容器资源限制和安全保护相关参数" aria-hidden="true">#</a></h3><h2 id="终止容器-docker-stop" tabindex="-1">终止容器 docker stop <a class="header-anchor" href="#终止容器-docker-stop" aria-hidden="true">#</a></h2><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">stop</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">容器ID或名称（ID可以简写，唯一即可）</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">container</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">stop</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 停止所有容器</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">stop</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> ps -a -q</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span></code></pre></div><h3 id="暂停容器-pause-unpause" tabindex="-1">暂停容器 pause/unpause <a class="header-anchor" href="#暂停容器-pause-unpause" aria-hidden="true">#</a></h3><p>有时我们只是希望暂时让容器暂停工作一段时间，比如要对容器的文件系统打个快照，或者 dcoker host 需要使用 CPU，这时可以执行 docker pause。</p><p>处于暂停状态的容器不会占用 CPU 资源，直到通过 docker unpause 恢复运行。</p><h2 id="进入容器" tabindex="-1">进入容器 <a class="header-anchor" href="#进入容器" aria-hidden="true">#</a></h2><h4 id="attach" tabindex="-1">attach <a class="header-anchor" href="#attach" aria-hidden="true">#</a></h4><p>缺点: 所有attach的终端会同步显示,阻塞</p><h4 id="exec" tabindex="-1">exec <a class="header-anchor" href="#exec" aria-hidden="true">#</a></h4><p>退出不会导致容器停止</p><p><code>docker exec -it xxxxxxxx /bin/bash</code></p><h4 id="nsenter工具" tabindex="-1">nsenter工具 <a class="header-anchor" href="#nsenter工具" aria-hidden="true">#</a></h4><h2 id="删除容器-docker-rm" tabindex="-1">删除容器 docker rm <a class="header-anchor" href="#删除容器-docker-rm" aria-hidden="true">#</a></h2><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># docker rm 一次可以指定多个容器，如果希望批量删除所有已经退出的容器，可以执行如下命令：</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">rm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-v</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> ps -aq -f status=exited</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 因为没有使用 -v，volume 遗留了下来。对于这样的孤儿 volume，可以用 docker volume rm 删除：</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 如果想批量删除孤儿 volume，可以执行：</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">volume</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ls</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">volume</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">rm</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$(</span><span style="color:#FFCB6B;">docker</span><span style="color:#C3E88D;"> volume ls -q</span><span style="color:#89DDFF;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="导入-导出容器" tabindex="-1">导入/导出容器 <a class="header-anchor" href="#导入-导出容器" aria-hidden="true">#</a></h2><p>docker export x.tar xxx docker import x.tar - test/ubuntu:v1.0</p><h2 id="容器限额" tabindex="-1">容器限额 <a class="header-anchor" href="#容器限额" aria-hidden="true">#</a></h2><h2 id="限额内存-run" tabindex="-1">限额内存(run) <a class="header-anchor" href="#限额内存-run" aria-hidden="true">#</a></h2><p>docker run --help</p><p>容器可使用的内存包括两部分：物理内存和 swap</p><p>-m 或 --memory：设置内存的使用限额，例如 100M, 2G。 --memory-swap：设置 内存+swap 的使用限额。</p><p>docker run -m 200M --memory-swap=300M ubuntu</p><p>其含义是允许该容器最多使用 200M 的内存和 100M 的 swap。默认情况下，上面两组参数为 -1，即对容器内存和 swap 的使用没有限制。</p><p>下面我们将使用 progrium/stress 镜像来学习如何为容器分配内存。该镜像可用于对容器执行压力测试。执行如下命令：</p><p>docker run -it -m 200M --memory-swap=300M progrium/stress --vm 1 --vm-bytes 280M</p><p>--vm 1：启动 1 个内存工作线程。</p><p>--vm-bytes 280M：每个线程分配 280M 内存。</p><p>docker run -it -m 200M --memory-swap=300M progrium/stress --vm 1 --vm-bytes 310M</p><p>如果在启动容器时只指定 -m 而不指定 --memory-swap，那么 --memory-swap 默认为 -m 的两倍，比如：</p><p>docker run -it -m 200M ubuntu</p><p>容器最多使用 200M 物理内存和 200M swap。</p><h2 id="限额cpu-run" tabindex="-1">限额CPU(run) <a class="header-anchor" href="#限额cpu-run" aria-hidden="true">#</a></h2><p>docker run --help</p><p>默认设置下，所有容器可以平等地使用 host CPU 资源并且没有限制。</p><p>Docker 可以通过 -c 或 --cpu-shares 设置容器使用 CPU 的权重。如果不指定，默认值为 1024。</p><p>与内存限额不同，通过 -c 设置的 cpu share 并不是 CPU 资源的绝对数量，而是一个相对的权重值。某个容器最终能分配到的 CPU 资源取决于它的 cpu share 占所有容器 cpu share 总和的比例。</p><p>换句话说：通过 cpu share 可以设置容器使用 CPU 的优先级。</p><h2 id="限额block-io-run" tabindex="-1">限额Block IO(run) <a class="header-anchor" href="#限额block-io-run" aria-hidden="true">#</a></h2><p>Block IO 是另一种可以限制容器使用的资源。Block IO 指的是磁盘的读写，docker 可通过设置权重、限制 bps 和 iops 的方式控制容器读写磁盘的带宽，下面分别讨论。</p><p>默认情况下，所有容器能平等地读写磁盘，可以通过设置 --blkio-weight 参数来改变容器 block IO 的优先级。</p><p>--blkio-weight 与 --cpu-shares 类似，设置的是相对权重值，默认为 500。</p><p>目前 Block IO 限额只对 direct IO（不使用文件缓存）有效。</p><p>限制 bps 和 iops</p><ul><li>bps 是 byte per second，每秒读写的数据量。</li><li>iops 是 io per second，每秒 IO 的次数。</li></ul><p>可通过以下参数控制容器的 bps 和 iops：</p><p>--device-read-bps，限制读某个设备的 bps。</p><p>--device-write-bps，限制写某个设备的 bps。</p><p>--device-read-iops，限制读某个设备的 iops。</p><p>--device-write-iops，限制写某个设备的 iops。</p><p>下面这个例子限制容器写 /dev/sda 的速率为 30 MB/s</p><p>docker run -it --device-write-bps /dev/sda:30MB ubuntu</p><h2 id="cp复制命令" tabindex="-1">cp复制命令 <a class="header-anchor" href="#cp复制命令" aria-hidden="true">#</a></h2><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 从container复制到宿主机</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cp</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">options</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">container:path</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">localPath</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 从宿主机复制到container</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cp</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">options</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">localPath</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">container:path</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span></code></pre></div><h2 id="logs查看日志" tabindex="-1">logs查看日志 <a class="header-anchor" href="#logs查看日志" aria-hidden="true">#</a></h2><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">logs</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-f</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">--tail</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">container</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">logs</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--tail</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">20</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-t</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">00since</span><span style="color:#A6ACCD;">  </span><span style="color:#C3E88D;">container</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span></code></pre></div>`,90),o=[p];function r(t,c,i,d,C,y){return n(),a("div",null,o)}const D=s(e,[["render",r]]);export{u as __pageData,D as default};
