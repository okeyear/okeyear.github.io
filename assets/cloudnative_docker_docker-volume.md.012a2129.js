import{_ as s,c as a,o as n,a as l}from"./app.cf0a218f.js";const d=JSON.parse('{"title":"docker006 volume 数据卷","description":"","frontmatter":{},"headers":[{"level":2,"title":"数据卷容器","slug":"数据卷容器","link":"#数据卷容器","children":[]},{"level":2,"title":"数据卷的继承","slug":"数据卷的继承","link":"#数据卷的继承","children":[]},{"level":2,"title":"利用数据卷备份和迁移数据","slug":"利用数据卷备份和迁移数据","link":"#利用数据卷备份和迁移数据","children":[]},{"level":2,"title":"更改存储位置","slug":"更改存储位置","link":"#更改存储位置","children":[]}],"relativePath":"cloudnative/docker/docker-volume.md"}'),o={name:"cloudnative/docker/docker-volume.md"},p=l(`<h1 id="docker006-volume-数据卷" tabindex="-1">docker006 volume 数据卷 <a class="header-anchor" href="#docker006-volume-数据卷" aria-hidden="true">#</a></h1><p>数据卷就是在宿主中可以在容器之间进行共享和重用的一系列和文件和文件夹，通过docker run -v命令可以将数据卷挂载到对应的容器目录空间，进行文件读取，容器卷特性如下</p><ol><li>数据卷在容器之间可以共享,容器间传递数据将变得高效方便。</li><li>对数据卷内数据的修改会立马生效，无论是容器内操作还是本地操作。</li><li>在于数据持久化，它完全独立于容器的生命周期。</li><li>docker不会在容器删除时删除其挂载的数据卷。(docker rm -v 删除)</li><li>数据卷的变化不会影响镜像的更新。</li><li>数据卷是在容器启动时初始化的，如果容器使用的镜像在挂载点包含了数据，这些数据会拷贝到新的初始化数据卷中去</li></ol><p>注意权限: --privileged=true</p><p>centos7的selinux.....</p><p>通过docker volume创建</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">## 方式1 推荐</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--privileged=true</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-v</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">host_path:container_path:rw</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">image_id</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">## 方式2 不推荐</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 创建, 默认放在/var/lib/docker/volume/name/_data目录下</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">volume</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">create</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">nam</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 查看</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">volume</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">inspect</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">nam</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">volume</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ls</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 删除</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">volume</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">rm</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">nam</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 使用</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-v</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">volume_name:container_path</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">image_id</span></span>
<span class="line"></span></code></pre></div><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-itd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">8080</span><span style="color:#C3E88D;">:</span><span style="color:#F78C6C;">8080</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">-v </span><span style="color:#C3E88D;">/usr/develop/index.html:/usr/local/tomcat/webapps/docs/index.html:ro</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">\`</span><span style="color:#676E95;font-style:italic;"># 挂载index.html文件到/docs/index.html并覆盖</span><span style="color:#89DDFF;">\`</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">\\</span></span>
<span class="line"><span style="color:#A6ACCD;">-v </span><span style="color:#C3E88D;">/usr/develop/self:/usr/local/tomcat/webapps/docs/</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">\`</span><span style="color:#676E95;font-style:italic;"># 挂载self文件夹到webapps文件夹下</span><span style="color:#89DDFF;">\`</span><span style="color:#A6ACCD;">  </span><span style="color:#FFCB6B;">\\</span></span>
<span class="line"><span style="color:#A6ACCD;">--name </span><span style="color:#C3E88D;">tomcat_1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tomcat</span></span>
<span class="line"></span></code></pre></div><h2 id="数据卷容器" tabindex="-1">数据卷容器 <a class="header-anchor" href="#数据卷容器" aria-hidden="true">#</a></h2><p>接数据卷，已经存在一个挂载了数据卷的容器；由于数据卷在容器之前是可以共享的，所以此时如果存在其他容器通过docker run --volumes-from [容器别名]命令挂载到该容器上，则该容器可以被称之为数据卷容器，其主要功能是提供数据卷供其他容器挂载。当数据卷容器宕机后，并不会造成数据卷的回收卸载，数据卷会继续挂载在其他容器中。当全部挂载该数据卷的容器全部宕机后，该数据卷才会卸载</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-itd</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">9090</span><span style="color:#C3E88D;">:</span><span style="color:#F78C6C;">8080</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--volumes-from</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tomcat_1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--name</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tomcat_2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tomcat</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># --volumes-from参数所挂载数据卷的容器自身并不需要保持在运行状态.</span></span>
<span class="line"></span></code></pre></div><h2 id="数据卷的继承" tabindex="-1">数据卷的继承 <a class="header-anchor" href="#数据卷的继承" aria-hidden="true">#</a></h2><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">--volumes-from</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">container_id</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="利用数据卷备份和迁移数据" tabindex="-1">利用数据卷备份和迁移数据 <a class="header-anchor" href="#利用数据卷备份和迁移数据" aria-hidden="true">#</a></h2><ol><li>备份</li></ol><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--volumes-from</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">dbdata</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-v</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$(</span><span style="color:#82AAFF;">pwd</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">:/backup:wr</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--name</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">worker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ubuntu</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tar</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">cvf</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/backup/dbdata.tar</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/dbdata</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#挂载宿主机当前目录，容器中的目录是/backup，权限是读写权限，运行ubuntu系统，压缩之后的路径是/backup/dbdata.tar，/dbdata是需要压缩备份的目录</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#将一个包含数据卷的容器中的数据，通过一个容器执行一个压缩命令，从而将数据备份出来。</span></span>
<span class="line"></span></code></pre></div><ol start="2"><li>恢复</li></ol><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 创建一个带有数据卷的容器</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-v</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/dbdata</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--name</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">dbdata2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ubuntu</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/bin/bash</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#然后创建一个新的容器,挂载dbdata2的容器,冰使用untar解压备份文件到锁挂载的容器卷中:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#docker run --volumes-from [container name] -v $(pwd):/backup ubuntu tar xvf /backup/backup.tar [container data volume]</span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--volumes-from</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">dbdata2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-v</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">$(</span><span style="color:#82AAFF;">pwd</span><span style="color:#89DDFF;">)</span><span style="color:#C3E88D;">:/backup</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">busybox</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tar</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">xvf</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/backup/backup.tar</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span></code></pre></div><h2 id="更改存储位置" tabindex="-1">更改存储位置 <a class="header-anchor" href="#更改存储位置" aria-hidden="true">#</a></h2><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">mkdir</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/etc/systemd/system/docker.service.d/</span></span>
<span class="line"><span style="color:#FFCB6B;">cat</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/etc/systemd/system/docker.service.d/docker.conf</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;EOF</span></span>
<span class="line"><span style="color:#C3E88D;">[Service] </span></span>
<span class="line"><span style="color:#C3E88D;">ExecStart= </span></span>
<span class="line"><span style="color:#C3E88D;">ExecStart=/usr/bin/dockerd --graph=&quot;/data/docker&quot; --storage-driver=devicemapper</span></span>
<span class="line"><span style="color:#89DDFF;">EOF</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">info</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">grep</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Docker Root Dir</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#sudo apt-get remove docker docker-engine docker-ce docker.io</span></span>
<span class="line"><span style="color:#FFCB6B;">mkdir</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/data/docker</span></span>
<span class="line"><span style="color:#FFCB6B;">mkdir</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/etc/systemd/system/docker.service.d/</span></span>
<span class="line"><span style="color:#FFCB6B;">cat</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/etc/systemd/system/docker.service.d/docker.conf</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;&lt;EOF</span></span>
<span class="line"><span style="color:#C3E88D;">[Service] </span></span>
<span class="line"><span style="color:#C3E88D;">ExecStart= </span></span>
<span class="line"><span style="color:#C3E88D;">ExecStart=/usr/bin/dockerd --graph=&quot;/data/docker&quot; </span></span>
<span class="line"><span style="color:#89DDFF;">EOF</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">systemctl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">daemon-reload</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">systemctl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">start</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span></span>
<span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">info</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">grep</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Docker Root Dir</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre></div>`,20),e=[p];function t(c,r,C,y,D,i){return n(),a("div",null,e)}const u=s(o,[["render",t]]);export{d as __pageData,u as default};
