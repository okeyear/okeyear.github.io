import{_ as s,c as a,o as n,a as l}from"./app.cf0a218f.js";const F=JSON.parse('{"title":"docker008 Dockerfile详解","description":"","frontmatter":{},"headers":[{"level":2,"title":"1. FROM 基础镜像信息","slug":"_1-from-基础镜像信息","link":"#_1-from-基础镜像信息","children":[]},{"level":2,"title":"2. MAINTAINER 维护者信息","slug":"_2-maintainer-维护者信息","link":"#_2-maintainer-维护者信息","children":[]},{"level":2,"title":"2. LABEL 生成镜像的元数据标签","slug":"_2-label-生成镜像的元数据标签","link":"#_2-label-生成镜像的元数据标签","children":[]},{"level":2,"title":"3 RUN 镜像操作指令","slug":"_3-run-镜像操作指令","link":"#_3-run-镜像操作指令","children":[]},{"level":2,"title":"5 WORKDIR","slug":"_5-workdir","link":"#_5-workdir","children":[]},{"level":2,"title":"4. CMD 容器启动时执行命令","slug":"_4-cmd-容器启动时执行命令","link":"#_4-cmd-容器启动时执行命令","children":[]},{"level":2,"title":"5. ENTRYPOINT 默认入口","slug":"_5-entrypoint-默认入口","link":"#_5-entrypoint-默认入口","children":[]},{"level":2,"title":"6. EXPOSE 指定端口","slug":"_6-expose-指定端口","link":"#_6-expose-指定端口","children":[]},{"level":2,"title":"7. ENV 设置环境变量","slug":"_7-env-设置环境变量","link":"#_7-env-设置环境变量","children":[]},{"level":2,"title":"8. ADD 从src复制文件到container的dest路径","slug":"_8-add-从src复制文件到container的dest路径","link":"#_8-add-从src复制文件到container的dest路径","children":[]},{"level":2,"title":"9. COPY 拷贝文件或目录","slug":"_9-copy-拷贝文件或目录","link":"#_9-copy-拷贝文件或目录","children":[]},{"level":2,"title":"11. VOLUME 数据卷挂载点","slug":"_11-volume-数据卷挂载点","link":"#_11-volume-数据卷挂载点","children":[]},{"level":2,"title":"12. USER 设置运行容器时的用户名或UID","slug":"_12-user-设置运行容器时的用户名或uid","link":"#_12-user-设置运行容器时的用户名或uid","children":[]},{"level":2,"title":"14. ARG 定义变量","slug":"_14-arg-定义变量","link":"#_14-arg-定义变量","children":[]},{"level":2,"title":"15. ONBUILD","slug":"_15-onbuild","link":"#_15-onbuild","children":[]},{"level":2,"title":"16. STOPSIGNAL","slug":"_16-stopsignal","link":"#_16-stopsignal","children":[]},{"level":2,"title":"17. HEALTHCHECK","slug":"_17-healthcheck","link":"#_17-healthcheck","children":[]},{"level":2,"title":"18. SHELL","slug":"_18-shell","link":"#_18-shell","children":[]},{"level":2,"title":"windows中添加(建议)","slug":"windows中添加-建议","link":"#windows中添加-建议","children":[]},{"level":2,"title":"ubuntu中添加(建议)","slug":"ubuntu中添加-建议","link":"#ubuntu中添加-建议","children":[]},{"level":2,"title":"使用Dockerfiles创建镜像","slug":"使用dockerfiles创建镜像","link":"#使用dockerfiles创建镜像","children":[]},{"level":2,"title":"使用.dockerignore文件","slug":"使用-dockerignore文件","link":"#使用-dockerignore文件","children":[]},{"level":2,"title":"待整理","slug":"待整理","link":"#待整理","children":[]}],"relativePath":"cloudnative/docker/docker-Dockerfile.md"}'),p={name:"cloudnative/docker/docker-Dockerfile.md"},o=l(`<h1 id="docker008-dockerfile详解" tabindex="-1">docker008 Dockerfile详解 <a class="header-anchor" href="#docker008-dockerfile详解" aria-hidden="true">#</a></h1><p><a href="https://docs.docker.com/engine/reference/builder/" target="_blank" rel="noreferrer">https://docs.docker.com/engine/reference/builder</a></p><p><a href="https://k8s.coding3min.com/docker-jing-xiang/best-dockerfile" target="_blank" rel="noreferrer">https://k8s.coding3min.com/docker-jing-xiang/best-dockerfile</a><a href="https://k8s.coding3min.com/docker-jing-xiang/best-dockerfile-other" target="_blank" rel="noreferrer">https://k8s.coding3min.com/docker-jing-xiang/best-dockerfile-other</a></p><h2 id="_1-from-基础镜像信息" tabindex="-1">1. FROM 基础镜像信息 <a class="header-anchor" href="#_1-from-基础镜像信息" aria-hidden="true">#</a></h2><p>FROM命令可能是最重要的Dockerfile命令。改命令定义了使用哪个基础镜像启动构建流程。基础镜像可以为任意镜 像。如果基础镜像没有被发现，Docker将试图从Docker image index来查找该镜像。FROM命令必须是Dockerfile的首个命令。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># 第一行必须指定基于的基础镜像</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Usage: FROM [image name]</span></span>
<span class="line"><span style="color:#FFCB6B;">FROM</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">imag</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C3E88D;">:</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">ta</span><span style="color:#A6ACCD;">g</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#FFCB6B;">FROM</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">imag</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C3E88D;">@digest校验码</span></span>
<span class="line"></span></code></pre></div><h2 id="_2-maintainer-维护者信息" tabindex="-1">2. MAINTAINER 维护者信息 <a class="header-anchor" href="#_2-maintainer-维护者信息" aria-hidden="true">#</a></h2><p>这个命令用于声明作者，一般应该放在FROM的后面。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># Usage: MAINTAINER [name]</span></span>
<span class="line"><span style="color:#FFCB6B;">MAINTAINER</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">authors_name</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">email@emial.com</span></span>
<span class="line"><span style="color:#FFCB6B;">逐渐废弃，</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#FFCB6B;">LABLE</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">替代</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">MAINTAINER</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"></span></code></pre></div><h2 id="_2-label-生成镜像的元数据标签" tabindex="-1">2. LABEL 生成镜像的元数据标签 <a class="header-anchor" href="#_2-label-生成镜像的元数据标签" aria-hidden="true">#</a></h2><p>LABEL指定生成镜像的元数据标签信息</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">LABEL</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">ke</span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C3E88D;">=</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">valu</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">ke</span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C3E88D;">=</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">valu</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">ke</span><span style="color:#A6ACCD;">y</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C3E88D;">=</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">valu</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">...</span></span>
<span class="line"><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">一个Dockerfile种可以有多个LABEL</span></span>
<span class="line"><span style="color:#FFCB6B;">LABLE</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">maintainer=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">1@1.com</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">LABEL</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">multi.label1=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">value1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">multi.label2=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">value2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">other=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">value3</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"></span></code></pre></div><h2 id="_3-run-镜像操作指令" tabindex="-1">3 RUN 镜像操作指令 <a class="header-anchor" href="#_3-run-镜像操作指令" aria-hidden="true">#</a></h2><p>(运行指定命令用,即/bin/sh -c,安装软件用) 两种形式:</p><ul><li>run command shell格式</li><li>run [ &quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot; ]后一种形式必须用双引号,因为会被解析成Json字符串. exec格式</li></ul><p>RUN命令是Dockerfile执行命令的核心部分。它接受命令作为参数并用于创建镜像。不像CMD命令，RUN命令用于创建镜像（在之前commit的层之上形成新的层）。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># Usage: RUN [command]</span></span>
<span class="line"><span style="color:#FFCB6B;">RUN</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">aptitude</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-y</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">riak</span></span>
<span class="line"><span style="color:#FFCB6B;">RUN</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">/bin/bash</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">-c</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">,</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">echo hello</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">]</span></span>
<span class="line"></span></code></pre></div><h2 id="_5-workdir" tabindex="-1">5 WORKDIR <a class="header-anchor" href="#_5-workdir" aria-hidden="true">#</a></h2><p><a href="https://docs.docker.com/engine/reference/builder/#workdir" target="_blank" rel="noreferrer">https://docs.docker.com/engine/reference/builder/#workdir</a></p><p>Docker默认工作目录是/。只有RUN能执行cd切换目录，而且还只作用当下的RUN。</p><p>也就是每一个RUN都是独进行的。</p><p>想让其他指令也在指定目录下运行，就需要WORKDIR</p><p>WORKDIR命令用于设置CMD指明的命令的运行目录。 设置指令，可以多次切换(相当于cd命令)，对RUN,CMD,ENTRYPOINT生效。 格式:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">WORKDIR</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/path/to/workdir</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"></span></code></pre></div><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">WORKDIR</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/a</span></span>
<span class="line"><span style="color:#FFCB6B;">WORKDIR</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">b</span></span>
<span class="line"><span style="color:#FFCB6B;">WORKDIR</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">c</span></span>
<span class="line"><span style="color:#FFCB6B;">RUN</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pwd</span></span>
<span class="line"></span></code></pre></div><p>pwd执行的结果是/a/b/c</p><p>WORKDIR也可以解析环境变量 如：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">ENV</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">DIRPATH</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/path</span></span>
<span class="line"><span style="color:#FFCB6B;">WORKDIR</span><span style="color:#A6ACCD;"> $DIRPATH</span><span style="color:#C3E88D;">/</span><span style="color:#A6ACCD;">$DIRNAME</span></span>
<span class="line"><span style="color:#FFCB6B;">RUN</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">pwd</span></span>
<span class="line"></span></code></pre></div><p>pwd的执行结果是/path/$DIRNAME</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">WORKDIR</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/usr/local/tomcat</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="_4-cmd-容器启动时执行命令" tabindex="-1">4. CMD 容器启动时执行命令 <a class="header-anchor" href="#_4-cmd-容器启动时执行命令" aria-hidden="true">#</a></h2><p>（设置container启动时执行的操作） 三种格式:</p><ul><li>CMD [&quot;executable&quot;,&quot;param1&quot;,&quot;param2&quot;]使用exec执行,是推荐使用方式</li><li>CMD command param1 param2 在/bin/sh中执行,提供给需要交互的应用</li><li>CMD [&quot;param1&quot;,&quot;param2&quot;] 提供给ENTRYPOINT的默认参数</li></ul><p>指定容器启动时候执行的命令，每个Dockerfile只能有一个CMD命令。如果有多条，只有最后一条被执行。 如果用户启动容器时候指定了运行的命令，则会覆盖掉CMD指定的命令。</p><h2 id="_5-entrypoint-默认入口" tabindex="-1">5. ENTRYPOINT 默认入口 <a class="header-anchor" href="#_5-entrypoint-默认入口" aria-hidden="true">#</a></h2><p>指定镜像的默认入口命令.启动容器时作为跟命令执行.</p><p>格式1(exec调用执行)：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">ENTRYPOINT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">executable</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">,</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">param1</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">,</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">param2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">like</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">an</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">exec,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">the</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">preferred</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">form</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"></span></code></pre></div><p>格式2(shell中执行.CMD指令指定值作为参数)：</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">ENTRYPOINT</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">command</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">param1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">param2</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">as</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">a</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">shell</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">CMD Args</span><span style="color:#89DDFF;">]</span></span>
<span class="line"></span></code></pre></div><p>当独自使用时，如果你还使用了CMD命令且CMD是一个完整的可执行的命令，那么CMD指令和ENTRYPOINT会互相覆盖只有最后一个CMD或者ENTRYPOINT有效。</p><p>ENTRYPOINT 帮助你配置一个容器使之可执行化，如果你结合CMD命令和ENTRYPOINT命令，你可以从CMD命令中移除“application”而仅仅保留参数，参数将传递给ENTRYPOINT命令。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># Usage: ENTRYPOINT application &quot;argument&quot;, &quot;argument&quot;, ..</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Remember: arguments are optional. They can be provided by CMD</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># or during the creation of a container.</span></span>
<span class="line"><span style="color:#FFCB6B;">ENTRYPOINT</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">echo</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Usage example with CMD:</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Arguments set with CMD can be overridden during *run*</span></span>
<span class="line"><span style="color:#FFCB6B;">CMD</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello docker!</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#FFCB6B;">ENTRYPOINT</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">echo</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># CMD指令将不会被执行，只有ENTRYPOINT指令被执行  </span></span>
<span class="line"><span style="color:#FFCB6B;">CMD</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">“Hello,</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">World!”</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#FFCB6B;">ENTRYPOINT</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ls</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-l</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#FFCB6B;">另一种用法和CMD指令配合使用来指定ENTRYPOINT的默认参数，这时CMD指令不是一个完整的可执行命令，仅仅是参数部分；ENTRYPOINT指令只能使用JSON方式指定执行命令，而不能指定参数。</span></span>
<span class="line"><span style="color:#FFCB6B;">FROM</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ubuntu</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#FFCB6B;">CMD</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">-l</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#FFCB6B;">ENTRYPOINT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/usr/bin/ls</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="_6-expose-指定端口" tabindex="-1">6. EXPOSE 指定端口 <a class="header-anchor" href="#_6-expose-指定端口" aria-hidden="true">#</a></h2><p>注意: 只声明,并不会自动完成端口映射 EXPOSE用来指定端口，使容器内的应用可以通过端口和外界交互。与启动容器的-P -p配合使用。</p><p>设置指令，该指令会将容器中的端口映射成宿主机器中的某个端口。当你需要访问容器的时候，可以不是用容器的IP地址而是使用宿主机器的IP地址和映射后的端口。</p><p>要完成整个操作需要两个步骤:</p><ul><li>首先在Dockerfile使用EXPOSE设置需要映射的容器端口</li><li>然后在运行容器的时候指定-p选项加上EXPOSE设置的端口</li></ul><p>这样EXPOSE设置的端口号会被随机映射成宿主机器中的一个端口号。也可以指定需要映射到宿主机器的那个端口，这时要确保宿主机器上的端口号没有被使用。 EXPOSE指令可以一次设置多个端口号，相应的运行容器的时候，可以配套的多次使用-p选项。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># Usage: EXPOSE [port/tcp port/udp] 默认为tcp</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 映射一个端口  </span></span>
<span class="line"><span style="color:#FFCB6B;">EXPOSE</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">port1</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 相应的运行容器使用的命令  </span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">port1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">image</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 映射多个端口  </span></span>
<span class="line"><span style="color:#FFCB6B;">EXPOSE</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">port1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">port2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">port3</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 相应的运行容器使用的命令  </span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">port1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">port2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">port3</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">image</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 还可以指定需要映射到宿主机器上的某个端口号  </span></span>
<span class="line"><span style="color:#FFCB6B;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">run</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">host_port1:port1</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">host_port2:port2</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-p</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">host_port3:port3</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">image</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="_7-env-设置环境变量" tabindex="-1">7. ENV 设置环境变量 <a class="header-anchor" href="#_7-env-设置环境变量" aria-hidden="true">#</a></h2><p>ENV命令用于设置环境变量。这些变量以key=value的形式存在，并可以在容器内被脚本或者程序调用。这个机制给在容器中运行应用带来了极大的便利。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># Usage: ENV key value</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Usage: ENV key=value</span></span>
<span class="line"><span style="color:#FFCB6B;">ENV</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">SERVER_WORKS</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">4</span></span>
<span class="line"><span style="color:#FFCB6B;">ENV</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">JAVA_HOME</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/usr/local/jdk</span></span>
<span class="line"><span style="color:#FFCB6B;">ENV</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">XX_ver</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1.1</span></span>
<span class="line"><span style="color:#FFCB6B;">RUN</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">curl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-SL</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">http://xxxxx.xxx/xxx-</span><span style="color:#A6ACCD;">$XX_ver</span><span style="color:#C3E88D;">.tar.gz</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">tar</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-xJC</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/user/src/xxx</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">...</span></span>
<span class="line"><span style="color:#FFCB6B;">ENV</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">PATH</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/user/local/xxx_</span><span style="color:#A6ACCD;">$XX_ver</span><span style="color:#C3E88D;">/bin:</span><span style="color:#A6ACCD;">$PATH</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 可以用docker inspect命令查看</span></span>
<span class="line"></span></code></pre></div><p>注意: dokcer run --env k=v时候会覆盖掉</p><h2 id="_8-add-从src复制文件到container的dest路径" tabindex="-1">8. ADD 从src复制文件到container的dest路径 <a class="header-anchor" href="#_8-add-从src复制文件到container的dest路径" aria-hidden="true">#</a></h2><p>ADD命令有两个参数，源和目标。它的基本作用是从源系统的文件系统上复制文件到目标容器的文件系统。</p><ul><li>如果是文件或文件夹,复制</li><li>如果源是一个URL，那该URL的内容将被下载并复制到容器中。</li><li>如果是tar文件,自动解压到dest路径下</li></ul><p>dest可以是镜像内的绝对路径,或者相对于工作目录(WORKDIR)的相对路径</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># Usage: ADD &lt;src&gt; &lt;dest&gt;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Usage: ADD [source directory or URL] [destination directory]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">ADD</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/my_app_folder</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/my_app_folder</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">CMD</span></span>
<span class="line"></span></code></pre></div><p>和RUN命令相似，CMD可以用于执行特定的命令。和RUN不同的是，这些命令不是在镜像构建的过程中执行的，而是在用镜像构建容器后被调用。 当目标路径不存在时，会自动创建；当使用本地目录为源目录时，推荐使用COPY。</p><h2 id="_9-copy-拷贝文件或目录" tabindex="-1">9. COPY 拷贝文件或目录 <a class="header-anchor" href="#_9-copy-拷贝文件或目录" aria-hidden="true">#</a></h2><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">COPY</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">sr</span><span style="color:#A6ACCD;">c</span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">des</span><span style="color:#A6ACCD;">t</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"></span></code></pre></div><p>命令有两个参数，源和目标。它的基本作用是从源系统的文件系统上复制文件到目标容器的文件系统。 src为绝对路径或者Dockerfile所在目录的相对路径，文件或目录。 路径支持正则格式. 当使用本地目录为源目录时，推荐使用COPY。</p><h2 id="_11-volume-数据卷挂载点" tabindex="-1">11. VOLUME 数据卷挂载点 <a class="header-anchor" href="#_11-volume-数据卷挂载点" aria-hidden="true">#</a></h2><p>VOLUME命令用于让你的容器访问宿主机上的目录。</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># Usage: VOLUME [&quot;/dir_1&quot;, &quot;/dir_2&quot; ..]</span></span>
<span class="line"><span style="color:#FFCB6B;">VOLUME</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/my_files</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#FFCB6B;">VOLUME</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/var/log/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#FFCB6B;">VOLUME</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/var/log</span></span>
<span class="line"><span style="color:#FFCB6B;">VOLUME</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/var/log</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/var/db</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="_12-user-设置运行容器时的用户名或uid" tabindex="-1">12. USER 设置运行容器时的用户名或UID <a class="header-anchor" href="#_12-user-设置运行容器时的用户名或uid" aria-hidden="true">#</a></h2><p>USER命令用于设置运行容器时的用户名或UID。</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># Usage: USER [UID]</span></span>
<span class="line"><span style="color:#FFCB6B;">USER</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">751</span></span>
<span class="line"><span style="color:#FFCB6B;">设置指令，设置启动容器的用户，默认是root用户。</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 指定memcached的运行用户  </span></span>
<span class="line"><span style="color:#FFCB6B;">ENTRYPOINT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">memcached</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#FFCB6B;">USER</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">daemon</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#FFCB6B;">或</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"><span style="color:#FFCB6B;">ENTRYPOINT</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">memcached</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">,</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">-u</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">,</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">daemon</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;">  </span></span>
<span class="line"></span></code></pre></div><h2 id="_14-arg-定义变量" tabindex="-1">14. ARG 定义变量 <a class="header-anchor" href="#_14-arg-定义变量" aria-hidden="true">#</a></h2><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">ARG</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">nam</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C3E88D;">[=</span><span style="color:#89DDFF;">&lt;</span><span style="color:#C3E88D;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">valu</span><span style="color:#A6ACCD;">e</span><span style="color:#89DDFF;">&gt;</span><span style="color:#C3E88D;">]</span></span>
<span class="line"></span></code></pre></div><p>设置变量命令，ARG命令定义了一个变量，在docker build创建镜像的时候，使用 --build-arg=来指定参数 如果用户在build镜像时指定了一个参数没有定义在Dockerfile中，那么将有一个Warning [Warning] One or more build-args [foo] were not consumed. 如果我们给了ARG定义的参数默认值，那么当build镜像时没有指定参数值，将会使用这个默认值</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">我们可以定义一个或多个参数，如下：</span></span>
<span class="line"><span style="color:#FFCB6B;">FROM</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">busybox</span></span>
<span class="line"><span style="color:#FFCB6B;">ARG</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">user1</span></span>
<span class="line"><span style="color:#FFCB6B;">ARG</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">buildno</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">也可以给参数一个默认值：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">FROM</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">busybox</span></span>
<span class="line"><span style="color:#FFCB6B;">ARG</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">user1=someuser</span></span>
<span class="line"><span style="color:#FFCB6B;">ARG</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">buildno=</span><span style="color:#F78C6C;">1</span></span>
<span class="line"></span></code></pre></div><p>docker build --build-arg name=value来传入</p><h2 id="_15-onbuild" tabindex="-1">15. ONBUILD <a class="header-anchor" href="#_15-onbuild" aria-hidden="true">#</a></h2><p>当前镜像作为其他镜像的基础镜像时,锁执行的创建操作指令.</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">ONBUILD</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#A6ACCD;">INSTRUCTION</span><span style="color:#89DDFF;">]</span></span>
<span class="line"></span></code></pre></div><p>这个命令只对当前镜像的子镜像生效。 比如当前镜像为A，在Dockerfile种添加：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">ONBUILD</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">RUN</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ls</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-al</span></span>
<span class="line"></span></code></pre></div><p>这个 ls -al 命令不会在A镜像构建或启动的时候执行 此时有一个镜像B是基于A镜像构建的，那么这个ls -al 命令会在B镜像构建的时候被执行。</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># image-A</span></span>
<span class="line"><span style="color:#FFCB6B;">ONBUILD</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">ADD</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/app/src</span></span>
<span class="line"><span style="color:#FFCB6B;">ONBUILD</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">RUN</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/usr/local/bin/python-build</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--dir</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/app/src</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>如果B中</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">FROM</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">image-A</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># 会自动执行如下</span></span>
<span class="line"><span style="color:#FFCB6B;">ADD</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/app/src</span></span>
<span class="line"><span style="color:#FFCB6B;">RUN</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/usr/local/bin/python-build</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--dir</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/app/src</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><p>使用ONBUILD的镜像,推荐在标签中注明,比如ruby:1.9-onbuild</p><h2 id="_16-stopsignal" tabindex="-1">16. STOPSIGNAL <a class="header-anchor" href="#_16-stopsignal" aria-hidden="true">#</a></h2><p>STOPSIGNAL命令是的作用是当容器停止时给系统发送什么样的指令，默认是15</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">STOPSIGNAL</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">signal</span></span>
<span class="line"></span></code></pre></div><h2 id="_17-healthcheck" tabindex="-1">17. HEALTHCHECK <a class="header-anchor" href="#_17-healthcheck" aria-hidden="true">#</a></h2><p>容器健康状况检查命令 语法有两种：</p><ul><li>HEALTHCHECK [OPTIONS] CMD command 容器内运行一个命令,根据返回值是否为0来判断</li><li>HEALTHCHECK NONE 禁止基础镜像中的健康检查</li><li>[OPTIONS]的选项支持以下三中选项：</li></ul><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">–interval=DURATION</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">两次检查默认的时间间隔为30秒</span></span>
<span class="line"><span style="color:#FFCB6B;">–timeout=DURATION</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">健康检查命令运行超时时长，默认30秒</span></span>
<span class="line"><span style="color:#FFCB6B;">–retries=N</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">当连续失败指定次数后，则容器被认为是不健康的，状态为unhealthy，默认次数是3</span></span>
<span class="line"></span></code></pre></div><p>HEALTHCHECK命令只能出现一次，如果出现了多次，只有最后一个生效。 CMD后边的命令的返回值决定了本次健康检查是否成功，具体的返回值如下： 0: success - 表示容器是健康的 1: unhealthy - 表示容器已经不能工作了 2: reserved - 保留值</p><p>例子：</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">HEALTHCHECK</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--interval=5m</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--timeout=3s</span><span style="color:#A6ACCD;"> \\</span></span>
<span class="line"><span style="color:#A6ACCD;">CMD </span><span style="color:#C3E88D;">curl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-f</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">http://localhost/</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">exit</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#FFCB6B;">健康检查命令是：curl</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-f</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">http://localhost/</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">||</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">exit</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">1</span></span>
<span class="line"><span style="color:#FFCB6B;">两次检查的间隔时间是5秒</span></span>
<span class="line"><span style="color:#FFCB6B;">命令超时时间为3秒</span></span>
<span class="line"></span></code></pre></div><h2 id="_18-shell" tabindex="-1">18. SHELL <a class="header-anchor" href="#_18-shell" aria-hidden="true">#</a></h2><p>指定其他命令使用shell时的默认shell类型</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">SHELL</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">executable</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">,</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">parameters</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#FFCB6B;">默认值为</span></span>
<span class="line"><span style="color:#FFCB6B;">SHELL</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/bin/sh</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">,</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">-c</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"></span></code></pre></div><h2 id="windows中添加-建议" tabindex="-1">windows中添加(建议) <a class="header-anchor" href="#windows中添加-建议" aria-hidden="true">#</a></h2><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># escape=\` 来指定转义信息</span></span>
<span class="line"></span>
<span class="line"></span></code></pre></div><h2 id="ubuntu中添加-建议" tabindex="-1">ubuntu中添加(建议) <a class="header-anchor" href="#ubuntu中添加-建议" aria-hidden="true">#</a></h2><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#FFCB6B;">ENV</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">DEBIAN_FRONTEND</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">noninteractive</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#设置环境变量，所有操作都是非交互式的</span></span>
<span class="line"><span style="color:#FFCB6B;">RUN</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Asia/Shanghai</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/etc/timezone</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&amp;&amp;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">\\</span></span>
<span class="line"><span style="color:#A6ACCD;">dpkg-reconfigure </span><span style="color:#C3E88D;">-f</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">noninteractive</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">tzdata</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#注意这里要更改系统的时区设置，因为在Web应用中经常会用到时区这个系统变量，默认的ubuntu会让应用发生不可思议的效果。</span></span>
<span class="line"></span></code></pre></div><h2 id="使用dockerfiles创建镜像" tabindex="-1">使用Dockerfiles创建镜像 <a class="header-anchor" href="#使用dockerfiles创建镜像" aria-hidden="true">#</a></h2><ul><li>注意一个镜像不能超过 127 层 使用Dockerfiles和手工使用Docker Daemon运行命令一样简单。脚本运行后输出为新的镜像ID。 另外，可以通过 .dockerignore文件（每一行添加一条匹配模式）来让Docker忽略路径下的目录和文件。</li></ul><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># Build an image using the Dockerfile at current location</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># Example: sudo docker build -t [name] .</span></span>
<span class="line"><span style="color:#FFCB6B;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-t</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">my_mongodb</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span><span style="color:#A6ACCD;"> </span></span>
<span class="line"><span style="color:#FFCB6B;">$</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">sudo</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">docker</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">-t=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ouruser/sinatra:v2</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">.</span></span>
<span class="line"></span></code></pre></div><ul><li>t 标记来添加 tag，指定新的镜像的用户信息。 &quot;.&quot; 是 Dockerfile 所在的路径（当前目录）,build时候的上下文目录</li><li>f 指定具体的 Dockerfile 的路径。 可以看到 build 进程在执行操作。它要做的第一件事情就是上传这个 Dockerfile 内容，因为所有的操作都要依据 Dockerfile 来进行。 然后，Dockfile 中的指令被一条一条的执行。每一步都创建了一个新的容器，在容器中执行指令并提交修改（就跟之前介绍过的 docker commit 一样）。当所有的指令都执行完毕之后，返回了最终的镜像 id。所有的中间步骤所产生的容器都被删除和清理了。</li></ul><h2 id="使用-dockerignore文件" tabindex="-1">使用.dockerignore文件 <a class="header-anchor" href="#使用-dockerignore文件" aria-hidden="true">#</a></h2><p>.dockerignore 文件中指定在传递给 docker引擎 时需要忽略掉的文件或文件夹。</p><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">#comment</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#代表根目录（上下文环境目录中）中以abc开头的任意直接子目录或者直接子文件将被忽略</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#如/abc  abc.txt</span></span>
<span class="line"><span style="color:#FFCB6B;">/abc*</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#代表根目录（上下文环境目录中）中任意直接子目录中以abc开头的任意直接子目录或者直接子文件将被忽略</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#如 /file/abc  /file/abc.txt</span></span>
<span class="line"><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">/abc</span><span style="color:#89DDFF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#代表根目录（上下文环境目录中）中任意两级目录下以abc开头的任意直接子目录或者直接子文件将被忽略</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#如 /file1/file2/abc  /file1/file2/abc.txt</span></span>
<span class="line"><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">/</span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">/abc</span><span style="color:#89DDFF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#排除根目录中的文件和目录，其名称是单字符扩展名temp。例如，/tempa与/tempb被排除在外。</span></span>
<span class="line"><span style="color:#FFCB6B;">temp?</span><span style="color:#A6ACCD;">    </span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#Docker还支持一个**匹配任意数量目录（包括零）的特殊通配符字符串</span></span>
<span class="line"><span style="color:#89DDFF;">**</span><span style="color:#A6ACCD;">/abc</span><span style="color:#89DDFF;">*</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#以!（感叹号）开头的行可用于对排除项进行例外处理,比如原本包含了README.md这个文件的过滤，但是加了如下一行后</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#就不会再过滤README.md，依然会将其提交到守护进程。</span></span>
<span class="line"><span style="color:#89DDFF;">!</span><span style="color:#FFCB6B;">README.md</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#异常规则的放置位置会影响行为</span></span>
<span class="line"><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">.md</span></span>
<span class="line"><span style="color:#89DDFF;">!</span><span style="color:#FFCB6B;">README*.md</span></span>
<span class="line"><span style="color:#FFCB6B;">README-secret.md</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#README-secret.md 仍然会被忽略</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;">.md</span></span>
<span class="line"><span style="color:#FFCB6B;">README-secret.md</span></span>
<span class="line"><span style="color:#89DDFF;">!</span><span style="color:#FFCB6B;">README*.md</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">#README-secret.md 不会被忽略</span></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">您甚至可以使用该.dockerignore文件来排除Dockerfile和.dockerignore文件。这些文件仍然发送到守护程序，因为它需要它们来完成它的工作。但是ADD和COPY命令不会将它们复制到图像中。</span></span>
<span class="line"></span></code></pre></div><h2 id="待整理" tabindex="-1">待整理 <a class="header-anchor" href="#待整理" aria-hidden="true">#</a></h2><div class="language-shell"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;"># put my local web site in myApp folder to /var/www</span></span>
<span class="line"><span style="color:#FFCB6B;">ADD</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">myApp</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/var/www</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># expose httpd port</span></span>
<span class="line"><span style="color:#FFCB6B;">EXPOSE</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">80</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># the command to run</span></span>
<span class="line"><span style="color:#FFCB6B;">CMD</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">/usr/sbin/apachectl</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">,</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">-D</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">,</span><span style="color:#89DDFF;"> &quot;</span><span style="color:#C3E88D;">FOREGROUND</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"></span></code></pre></div><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">#让Nginx运行在非Daemon模式</span></span>
<span class="line"><span style="color:#FFCB6B;">RUN</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">echo</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">ndaemon off;</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&gt;&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">/etc/nginx/nginx.conf</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#FFCB6B;">dpkg-reconfigure(选项</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">(</span><span style="color:#FFCB6B;">参数</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> -a：重新配置所有的软件包；</span></span>
<span class="line"><span style="color:#FFCB6B;">-u或--unseen-only：仅显示未提过的问题；</span></span>
<span class="line"><span style="color:#FFCB6B;">--default-priority：使用默认优先级，而非“低”级；</span></span>
<span class="line"><span style="color:#FFCB6B;">--force：强制执行操作，需谨慎使用此选项；</span></span>
<span class="line"><span style="color:#FFCB6B;">--no-reload：不要轻易的重装模板（使用时请慎重考虑）；</span></span>
<span class="line"><span style="color:#FFCB6B;">-f或--frontend：指定</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">debconf</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">前端界面；</span></span>
<span class="line"><span style="color:#FFCB6B;">-p或--priority：指定要显示的问题的最优先级；</span></span>
<span class="line"><span style="color:#FFCB6B;">--terse：开启简要模式。</span></span>
<span class="line"></span></code></pre></div>`,111),e=[o];function t(c,r,i,C,y,D){return n(),a("div",null,e)}const d=s(p,[["render",t]]);export{F as __pageData,d as default};
